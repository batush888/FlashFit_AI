version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT:-8080}:${BACKEND_PORT:-8080}"
    environment:
      - PORT=${BACKEND_PORT:-8080}
      - HOST=${BACKEND_HOST:-0.0.0.0}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-flashfit_ai}
      - POSTGRES_USER=${POSTGRES_USER:-flashfit_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-flashfit_password}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./data:/app/data
      - ./backend/data:/app/backend/data
    depends_on:
      - redis
      - postgres
    networks:
      - flashfit-network
    restart: unless-stopped

  # Frontend UI Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - VITE_API_BASE_URL=http://backend:${BACKEND_PORT:-8080}
      - VITE_ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      - backend
    networks:
      - flashfit-network
    restart: unless-stopped

  # Monitoring Service
  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    ports:
      - "${MONITOR_PORT:-9090}:${MONITOR_PORT:-9090}"
    environment:
      - PORT=${MONITOR_PORT:-9090}
      - HOST=${MONITOR_HOST:-0.0.0.0}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-flashfit_ai}
      - POSTGRES_USER=${POSTGRES_USER:-flashfit_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-flashfit_password}
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED:-true}
      - METRICS_RETENTION_DAYS=${METRICS_RETENTION_DAYS:-30}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30}
    depends_on:
      - redis
      - postgres
    networks:
      - flashfit-network
    restart: unless-stopped

  # Reverse Proxy (Nginx)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
      - monitoring
    networks:
      - flashfit-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - flashfit-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-flashfit_ai}
      - POSTGRES_USER=${POSTGRES_USER:-flashfit_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-flashfit_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - flashfit-network
    restart: unless-stopped

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - flashfit-network
    restart: unless-stopped

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - flashfit-network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  flashfit-network:
    driver: bridge